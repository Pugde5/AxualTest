/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.axual.client.example.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Contains the setting to generate an ApplicationLogAlert */
@org.apache.avro.specific.AvroGenerated
public class ApplicationLogAlertSetting extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6193096628763539424L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApplicationLogAlertSetting\",\"namespace\":\"io.axual.client.example.schema\",\"doc\":\"Contains the setting to generate an ApplicationLogAlert\",\"fields\":[{\"name\":\"source\",\"type\":\"string\",\"doc\":\"The logging application to respond to\"},{\"name\":\"logLevels\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"ApplicationLogLevel\",\"doc\":\"The level of the log message\",\"symbols\":[\"DEBUG\",\"INFO\",\"WARN\",\"ERROR\",\"FATAL\"]}},\"doc\":\"The Alert levels to respond to\"},{\"name\":\"addresses\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"The addresses to send the alert to\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ApplicationLogAlertSetting> ENCODER =
      new BinaryMessageEncoder<ApplicationLogAlertSetting>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ApplicationLogAlertSetting> DECODER =
      new BinaryMessageDecoder<ApplicationLogAlertSetting>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ApplicationLogAlertSetting> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ApplicationLogAlertSetting> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ApplicationLogAlertSetting> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ApplicationLogAlertSetting>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ApplicationLogAlertSetting to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ApplicationLogAlertSetting from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ApplicationLogAlertSetting instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ApplicationLogAlertSetting fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The logging application to respond to */
   private java.lang.CharSequence source;
  /** The Alert levels to respond to */
   private java.util.List<io.axual.client.example.schema.ApplicationLogLevel> logLevels;
  /** The addresses to send the alert to */
   private java.util.List<java.lang.CharSequence> addresses;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ApplicationLogAlertSetting() {}

  /**
   * All-args constructor.
   * @param source The logging application to respond to
   * @param logLevels The Alert levels to respond to
   * @param addresses The addresses to send the alert to
   */
  public ApplicationLogAlertSetting(java.lang.CharSequence source, java.util.List<io.axual.client.example.schema.ApplicationLogLevel> logLevels, java.util.List<java.lang.CharSequence> addresses) {
    this.source = source;
    this.logLevels = logLevels;
    this.addresses = addresses;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return source;
    case 1: return logLevels;
    case 2: return addresses;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: source = (java.lang.CharSequence)value$; break;
    case 1: logLevels = (java.util.List<io.axual.client.example.schema.ApplicationLogLevel>)value$; break;
    case 2: addresses = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'source' field.
   * @return The logging application to respond to
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * The logging application to respond to
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'logLevels' field.
   * @return The Alert levels to respond to
   */
  public java.util.List<io.axual.client.example.schema.ApplicationLogLevel> getLogLevels() {
    return logLevels;
  }


  /**
   * Sets the value of the 'logLevels' field.
   * The Alert levels to respond to
   * @param value the value to set.
   */
  public void setLogLevels(java.util.List<io.axual.client.example.schema.ApplicationLogLevel> value) {
    this.logLevels = value;
  }

  /**
   * Gets the value of the 'addresses' field.
   * @return The addresses to send the alert to
   */
  public java.util.List<java.lang.CharSequence> getAddresses() {
    return addresses;
  }


  /**
   * Sets the value of the 'addresses' field.
   * The addresses to send the alert to
   * @param value the value to set.
   */
  public void setAddresses(java.util.List<java.lang.CharSequence> value) {
    this.addresses = value;
  }

  /**
   * Creates a new ApplicationLogAlertSetting RecordBuilder.
   * @return A new ApplicationLogAlertSetting RecordBuilder
   */
  public static io.axual.client.example.schema.ApplicationLogAlertSetting.Builder newBuilder() {
    return new io.axual.client.example.schema.ApplicationLogAlertSetting.Builder();
  }

  /**
   * Creates a new ApplicationLogAlertSetting RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ApplicationLogAlertSetting RecordBuilder
   */
  public static io.axual.client.example.schema.ApplicationLogAlertSetting.Builder newBuilder(io.axual.client.example.schema.ApplicationLogAlertSetting.Builder other) {
    if (other == null) {
      return new io.axual.client.example.schema.ApplicationLogAlertSetting.Builder();
    } else {
      return new io.axual.client.example.schema.ApplicationLogAlertSetting.Builder(other);
    }
  }

  /**
   * Creates a new ApplicationLogAlertSetting RecordBuilder by copying an existing ApplicationLogAlertSetting instance.
   * @param other The existing instance to copy.
   * @return A new ApplicationLogAlertSetting RecordBuilder
   */
  public static io.axual.client.example.schema.ApplicationLogAlertSetting.Builder newBuilder(io.axual.client.example.schema.ApplicationLogAlertSetting other) {
    if (other == null) {
      return new io.axual.client.example.schema.ApplicationLogAlertSetting.Builder();
    } else {
      return new io.axual.client.example.schema.ApplicationLogAlertSetting.Builder(other);
    }
  }

  /**
   * RecordBuilder for ApplicationLogAlertSetting instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApplicationLogAlertSetting>
    implements org.apache.avro.data.RecordBuilder<ApplicationLogAlertSetting> {

    /** The logging application to respond to */
    private java.lang.CharSequence source;
    /** The Alert levels to respond to */
    private java.util.List<io.axual.client.example.schema.ApplicationLogLevel> logLevels;
    /** The addresses to send the alert to */
    private java.util.List<java.lang.CharSequence> addresses;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.axual.client.example.schema.ApplicationLogAlertSetting.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.logLevels)) {
        this.logLevels = data().deepCopy(fields()[1].schema(), other.logLevels);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.addresses)) {
        this.addresses = data().deepCopy(fields()[2].schema(), other.addresses);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing ApplicationLogAlertSetting instance
     * @param other The existing instance to copy.
     */
    private Builder(io.axual.client.example.schema.ApplicationLogAlertSetting other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.logLevels)) {
        this.logLevels = data().deepCopy(fields()[1].schema(), other.logLevels);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.addresses)) {
        this.addresses = data().deepCopy(fields()[2].schema(), other.addresses);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'source' field.
      * The logging application to respond to
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * The logging application to respond to
      * @param value The value of 'source'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogAlertSetting.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.source = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * The logging application to respond to
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'source' field.
      * The logging application to respond to
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogAlertSetting.Builder clearSource() {
      source = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'logLevels' field.
      * The Alert levels to respond to
      * @return The value.
      */
    public java.util.List<io.axual.client.example.schema.ApplicationLogLevel> getLogLevels() {
      return logLevels;
    }


    /**
      * Sets the value of the 'logLevels' field.
      * The Alert levels to respond to
      * @param value The value of 'logLevels'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogAlertSetting.Builder setLogLevels(java.util.List<io.axual.client.example.schema.ApplicationLogLevel> value) {
      validate(fields()[1], value);
      this.logLevels = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'logLevels' field has been set.
      * The Alert levels to respond to
      * @return True if the 'logLevels' field has been set, false otherwise.
      */
    public boolean hasLogLevels() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'logLevels' field.
      * The Alert levels to respond to
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogAlertSetting.Builder clearLogLevels() {
      logLevels = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'addresses' field.
      * The addresses to send the alert to
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAddresses() {
      return addresses;
    }


    /**
      * Sets the value of the 'addresses' field.
      * The addresses to send the alert to
      * @param value The value of 'addresses'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogAlertSetting.Builder setAddresses(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.addresses = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'addresses' field has been set.
      * The addresses to send the alert to
      * @return True if the 'addresses' field has been set, false otherwise.
      */
    public boolean hasAddresses() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'addresses' field.
      * The addresses to send the alert to
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogAlertSetting.Builder clearAddresses() {
      addresses = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ApplicationLogAlertSetting build() {
      try {
        ApplicationLogAlertSetting record = new ApplicationLogAlertSetting();
        record.source = fieldSetFlags()[0] ? this.source : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.logLevels = fieldSetFlags()[1] ? this.logLevels : (java.util.List<io.axual.client.example.schema.ApplicationLogLevel>) defaultValue(fields()[1]);
        record.addresses = fieldSetFlags()[2] ? this.addresses : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ApplicationLogAlertSetting>
    WRITER$ = (org.apache.avro.io.DatumWriter<ApplicationLogAlertSetting>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ApplicationLogAlertSetting>
    READER$ = (org.apache.avro.io.DatumReader<ApplicationLogAlertSetting>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.source);

    long size0 = this.logLevels.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (io.axual.client.example.schema.ApplicationLogLevel e0: this.logLevels) {
      actualSize0++;
      out.startItem();
      out.writeEnum(e0.ordinal());
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.addresses.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.addresses) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);

      long size0 = in.readArrayStart();
      java.util.List<io.axual.client.example.schema.ApplicationLogLevel> a0 = this.logLevels;
      if (a0 == null) {
        a0 = new SpecificData.Array<io.axual.client.example.schema.ApplicationLogLevel>((int)size0, SCHEMA$.getField("logLevels").schema());
        this.logLevels = a0;
      } else a0.clear();
      SpecificData.Array<io.axual.client.example.schema.ApplicationLogLevel> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.axual.client.example.schema.ApplicationLogLevel>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          io.axual.client.example.schema.ApplicationLogLevel e0 = (ga0 != null ? ga0.peek() : null);
          e0 = io.axual.client.example.schema.ApplicationLogLevel.values()[in.readEnum()];
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.addresses;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("addresses").schema());
        this.addresses = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<io.axual.client.example.schema.ApplicationLogLevel> a0 = this.logLevels;
          if (a0 == null) {
            a0 = new SpecificData.Array<io.axual.client.example.schema.ApplicationLogLevel>((int)size0, SCHEMA$.getField("logLevels").schema());
            this.logLevels = a0;
          } else a0.clear();
          SpecificData.Array<io.axual.client.example.schema.ApplicationLogLevel> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.axual.client.example.schema.ApplicationLogLevel>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              io.axual.client.example.schema.ApplicationLogLevel e0 = (ga0 != null ? ga0.peek() : null);
              e0 = io.axual.client.example.schema.ApplicationLogLevel.values()[in.readEnum()];
              a0.add(e0);
            }
          }
          break;

        case 2:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.addresses;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("addresses").schema());
            this.addresses = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










