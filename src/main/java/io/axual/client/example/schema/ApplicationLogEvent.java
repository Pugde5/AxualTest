/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.axual.client.example.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Generic application log event */
@org.apache.avro.specific.AvroGenerated
public class ApplicationLogEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2518564835721307114L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ApplicationLogEvent\",\"namespace\":\"io.axual.client.example.schema\",\"doc\":\"Generic application log event\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp of the event\"},{\"name\":\"source\",\"type\":{\"type\":\"record\",\"name\":\"Application\",\"doc\":\"Identification of an application\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The name of the application\"},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"doc\":\"(Optional) The application version\",\"default\":null},{\"name\":\"owner\",\"type\":[\"null\",\"string\"],\"doc\":\"The owner of the application\",\"default\":null}]},\"doc\":\"The application that sent the event\"},{\"name\":\"context\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"The application context, contains application-specific key-value pairs\"},{\"name\":\"level\",\"type\":{\"type\":\"enum\",\"name\":\"ApplicationLogLevel\",\"doc\":\"The level of the log message\",\"symbols\":[\"DEBUG\",\"INFO\",\"WARN\",\"ERROR\",\"FATAL\"]},\"doc\":\"The log level, being either DEBUG, INFO, WARN or ERROR\"},{\"name\":\"message\",\"type\":\"string\",\"doc\":\"The log message\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ApplicationLogEvent> ENCODER =
      new BinaryMessageEncoder<ApplicationLogEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ApplicationLogEvent> DECODER =
      new BinaryMessageDecoder<ApplicationLogEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ApplicationLogEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ApplicationLogEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ApplicationLogEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ApplicationLogEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ApplicationLogEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ApplicationLogEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ApplicationLogEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ApplicationLogEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Timestamp of the event */
   private long timestamp;
  /** The application that sent the event */
   private Application source;
  /** The application context, contains application-specific key-value pairs */
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context;
  /** The log level, being either DEBUG, INFO, WARN or ERROR */
   private io.axual.client.example.schema.ApplicationLogLevel level;
  /** The log message */
   private java.lang.CharSequence message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ApplicationLogEvent() {}

  /**
   * All-args constructor.
   * @param timestamp Timestamp of the event
   * @param source The application that sent the event
   * @param context The application context, contains application-specific key-value pairs
   * @param level The log level, being either DEBUG, INFO, WARN or ERROR
   * @param message The log message
   */
  public ApplicationLogEvent(java.lang.Long timestamp, io.axual.client.example.schema.Application source, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context, io.axual.client.example.schema.ApplicationLogLevel level, java.lang.CharSequence message) {
    this.timestamp = timestamp;
    this.source = source;
    this.context = context;
    this.level = level;
    this.message = message;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return source;
    case 2: return context;
    case 3: return level;
    case 4: return message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: source = (io.axual.client.example.schema.Application)value$; break;
    case 2: context = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 3: level = (io.axual.client.example.schema.ApplicationLogLevel)value$; break;
    case 4: message = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp of the event
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp of the event
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The application that sent the event
   */
  public io.axual.client.example.schema.Application getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * The application that sent the event
   * @param value the value to set.
   */
  public void setSource(io.axual.client.example.schema.Application value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'context' field.
   * @return The application context, contains application-specific key-value pairs
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getContext() {
    return context;
  }


  /**
   * Sets the value of the 'context' field.
   * The application context, contains application-specific key-value pairs
   * @param value the value to set.
   */
  public void setContext(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.context = value;
  }

  /**
   * Gets the value of the 'level' field.
   * @return The log level, being either DEBUG, INFO, WARN or ERROR
   */
  public io.axual.client.example.schema.ApplicationLogLevel getLevel() {
    return level;
  }


  /**
   * Sets the value of the 'level' field.
   * The log level, being either DEBUG, INFO, WARN or ERROR
   * @param value the value to set.
   */
  public void setLevel(io.axual.client.example.schema.ApplicationLogLevel value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The log message
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * The log message
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Creates a new ApplicationLogEvent RecordBuilder.
   * @return A new ApplicationLogEvent RecordBuilder
   */
  public static io.axual.client.example.schema.ApplicationLogEvent.Builder newBuilder() {
    return new io.axual.client.example.schema.ApplicationLogEvent.Builder();
  }

  /**
   * Creates a new ApplicationLogEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ApplicationLogEvent RecordBuilder
   */
  public static io.axual.client.example.schema.ApplicationLogEvent.Builder newBuilder(io.axual.client.example.schema.ApplicationLogEvent.Builder other) {
    if (other == null) {
      return new io.axual.client.example.schema.ApplicationLogEvent.Builder();
    } else {
      return new io.axual.client.example.schema.ApplicationLogEvent.Builder(other);
    }
  }

  /**
   * Creates a new ApplicationLogEvent RecordBuilder by copying an existing ApplicationLogEvent instance.
   * @param other The existing instance to copy.
   * @return A new ApplicationLogEvent RecordBuilder
   */
  public static io.axual.client.example.schema.ApplicationLogEvent.Builder newBuilder(io.axual.client.example.schema.ApplicationLogEvent other) {
    if (other == null) {
      return new io.axual.client.example.schema.ApplicationLogEvent.Builder();
    } else {
      return new io.axual.client.example.schema.ApplicationLogEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for ApplicationLogEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ApplicationLogEvent>
    implements org.apache.avro.data.RecordBuilder<ApplicationLogEvent> {

    /** Timestamp of the event */
    private long timestamp;
    /** The application that sent the event */
    private io.axual.client.example.schema.Application source;
    private io.axual.client.example.schema.Application.Builder sourceBuilder;
    /** The application context, contains application-specific key-value pairs */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> context;
    /** The log level, being either DEBUG, INFO, WARN or ERROR */
    private io.axual.client.example.schema.ApplicationLogLevel level;
    /** The log message */
    private java.lang.CharSequence message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.axual.client.example.schema.ApplicationLogEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasSourceBuilder()) {
        this.sourceBuilder = io.axual.client.example.schema.Application.newBuilder(other.getSourceBuilder());
      }
      if (isValidValue(fields()[2], other.context)) {
        this.context = data().deepCopy(fields()[2].schema(), other.context);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.level)) {
        this.level = data().deepCopy(fields()[3].schema(), other.level);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ApplicationLogEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(io.axual.client.example.schema.ApplicationLogEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      this.sourceBuilder = null;
      if (isValidValue(fields()[2], other.context)) {
        this.context = data().deepCopy(fields()[2].schema(), other.context);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.level)) {
        this.level = data().deepCopy(fields()[3].schema(), other.level);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.message)) {
        this.message = data().deepCopy(fields()[4].schema(), other.message);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp of the event
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp of the event
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp of the event
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp of the event
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * The application that sent the event
      * @return The value.
      */
    public io.axual.client.example.schema.Application getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * The application that sent the event
      * @param value The value of 'source'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder setSource(io.axual.client.example.schema.Application value) {
      validate(fields()[1], value);
      this.sourceBuilder = null;
      this.source = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * The application that sent the event
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'source' field and creates one if it doesn't exist yet.
     * The application that sent the event
     * @return This builder.
     */
    public io.axual.client.example.schema.Application.Builder getSourceBuilder() {
      if (sourceBuilder == null) {
        if (hasSource()) {
          setSourceBuilder(io.axual.client.example.schema.Application.newBuilder(source));
        } else {
          setSourceBuilder(io.axual.client.example.schema.Application.newBuilder());
        }
      }
      return sourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'source' field
     * The application that sent the event
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.axual.client.example.schema.ApplicationLogEvent.Builder setSourceBuilder(io.axual.client.example.schema.Application.Builder value) {
      clearSource();
      sourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'source' field has an active Builder instance
     * The application that sent the event
     * @return True if the 'source' field has an active Builder instance
     */
    public boolean hasSourceBuilder() {
      return sourceBuilder != null;
    }

    /**
      * Clears the value of the 'source' field.
      * The application that sent the event
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder clearSource() {
      source = null;
      sourceBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'context' field.
      * The application context, contains application-specific key-value pairs
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getContext() {
      return context;
    }


    /**
      * Sets the value of the 'context' field.
      * The application context, contains application-specific key-value pairs
      * @param value The value of 'context'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder setContext(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.context = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'context' field has been set.
      * The application context, contains application-specific key-value pairs
      * @return True if the 'context' field has been set, false otherwise.
      */
    public boolean hasContext() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'context' field.
      * The application context, contains application-specific key-value pairs
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder clearContext() {
      context = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'level' field.
      * The log level, being either DEBUG, INFO, WARN or ERROR
      * @return The value.
      */
    public io.axual.client.example.schema.ApplicationLogLevel getLevel() {
      return level;
    }


    /**
      * Sets the value of the 'level' field.
      * The log level, being either DEBUG, INFO, WARN or ERROR
      * @param value The value of 'level'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder setLevel(io.axual.client.example.schema.ApplicationLogLevel value) {
      validate(fields()[3], value);
      this.level = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'level' field has been set.
      * The log level, being either DEBUG, INFO, WARN or ERROR
      * @return True if the 'level' field has been set, false otherwise.
      */
    public boolean hasLevel() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'level' field.
      * The log level, being either DEBUG, INFO, WARN or ERROR
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder clearLevel() {
      level = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * The log message
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * The log message
      * @param value The value of 'message'.
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.message = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * The log message
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'message' field.
      * The log message
      * @return This builder.
      */
    public io.axual.client.example.schema.ApplicationLogEvent.Builder clearMessage() {
      message = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ApplicationLogEvent build() {
      try {
        ApplicationLogEvent record = new ApplicationLogEvent();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        if (sourceBuilder != null) {
          try {
            record.source = this.sourceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("source"));
            throw e;
          }
        } else {
          record.source = fieldSetFlags()[1] ? this.source : (io.axual.client.example.schema.Application) defaultValue(fields()[1]);
        }
        record.context = fieldSetFlags()[2] ? this.context : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        record.level = fieldSetFlags()[3] ? this.level : (io.axual.client.example.schema.ApplicationLogLevel) defaultValue(fields()[3]);
        record.message = fieldSetFlags()[4] ? this.message : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ApplicationLogEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<ApplicationLogEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ApplicationLogEvent>
    READER$ = (org.apache.avro.io.DatumReader<ApplicationLogEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    this.source.customEncode(out);

    long size0 = this.context.size();
    out.writeMapStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e0: this.context.entrySet()) {
      actualSize0++;
      out.startItem();
      out.writeString(e0.getKey());
      java.lang.CharSequence v0 = e0.getValue();
      out.writeString(v0);
    }
    out.writeMapEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeEnum(this.level.ordinal());

    out.writeString(this.message);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      if (this.source == null) {
        this.source = new io.axual.client.example.schema.Application();
      }
      this.source.customDecode(in);

      long size0 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.context; // Need fresh name due to limitation of macro system
      if (m0 == null) {
        m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
        this.context = m0;
      } else m0.clear();
      for ( ; 0 < size0; size0 = in.mapNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence k0 = null;
          k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
          java.lang.CharSequence v0 = null;
          v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
          m0.put(k0, v0);
        }
      }

      this.level = io.axual.client.example.schema.ApplicationLogLevel.values()[in.readEnum()];

      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          if (this.source == null) {
            this.source = new io.axual.client.example.schema.Application();
          }
          this.source.customDecode(in);
          break;

        case 2:
          long size0 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m0 = this.context; // Need fresh name due to limitation of macro system
          if (m0 == null) {
            m0 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size0);
            this.context = m0;
          } else m0.clear();
          for ( ; 0 < size0; size0 = in.mapNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence k0 = null;
              k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
              java.lang.CharSequence v0 = null;
              v0 = in.readString(v0 instanceof Utf8 ? (Utf8)v0 : null);
              m0.put(k0, v0);
            }
          }
          break;

        case 3:
          this.level = io.axual.client.example.schema.ApplicationLogLevel.values()[in.readEnum()];
          break;

        case 4:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










